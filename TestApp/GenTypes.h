//  Copyright 2019 The xi-editor authors.

// The contents of this file are autogenerated.

// scene from new (merged) generator

inline uint extract_8bit_value(uint bit_shift, uint package) {
    uint mask = 255;
    uint result = (package >> bit_shift) & mask;

    return result;
}

inline uint extract_16bit_value(uint bit_shift, uint package) {
    uint mask = 65535;
    uint result = (package >> bit_shift) & mask;

    return result;
}

typedef uint SimpleGroupRef;
typedef uint PietCircleRef;
typedef uint PietStrokeLineRef;
typedef uint PietFillRef;
typedef uint PietStrokePolyLineRef;
typedef uint PietItemRef;

struct SimpleGroupPacked {
    uint n_items;
    PietItemRef items;
    uint bboxes;
};

inline SimpleGroupPacked SimpleGroup_read(const device char *buf, SimpleGroupRef ref) {
    SimpleGroupPacked result;

    uint n_items = *(device const uint*)(buf + ref);
    result.n_items = n_items;

    PietItemRef items = *(device const uint*)(buf + ref + 4);
    result.items = items;

    uint bboxes = *(device const uint*)(buf + ref + 8);
    result.bboxes = bboxes;

    return result;
}

inline uint SimpleGroup_n_items(const device char *buf, SimpleGroupRef ref) {
    uint n_items = *(device const uint*)(buf + ref);
    return n_items;
}

inline PietItemRef SimpleGroup_items(const device char *buf, SimpleGroupRef ref) {
    PietItemRef items = *(device const uint*)(buf + ref + 4);
    return items;
}

inline uint SimpleGroup_bboxes(const device char *buf, SimpleGroupRef ref) {
    uint bboxes = *(device const uint*)(buf + ref + 8);
    return bboxes;
}

struct SimpleGroup {
    uint n_items;
    PietItemRef items;
    uint bboxes;
};

inline SimpleGroup SimpleGroup_unpack(SimpleGroupPacked packed_form) {
    SimpleGroup result;

    result.n_items = packed_form.n_items;
    result.items = packed_form.items;
    result.bboxes = packed_form.bboxes;

    return result;
}

struct PietCirclePacked {
    uint tag;
};

inline PietCirclePacked PietCircle_read(const device char *buf, PietCircleRef ref) {
    PietCirclePacked result;

    return result;
}

struct PietCircle {
};

inline PietCircle PietCircle_unpack(PietCirclePacked packed_form) {
    PietCircle result;


    return result;
}

struct PietStrokeLinePacked {
    uint tag;
    uint flags;
    uint rgba_color;
    float width;
    float2 start;
    float2 end;
};

inline PietStrokeLinePacked PietStrokeLine_read(const device char *buf, PietStrokeLineRef ref) {
    PietStrokeLinePacked result;

    uint flags = *(device const uint*)(buf + ref + 4);
    result.flags = flags;

    uint rgba_color = *(device const uint*)(buf + ref + 8);
    result.rgba_color = rgba_color;

    float width = as_type<float>(*(device const uint*)(buf + ref + 12));
    result.width = width;

    float2 start = as_type<float2>(*(device const packed_uint2*)(buf + ref + 16));
    result.start = start;

    float2 end = as_type<float2>(*(device const packed_uint2*)(buf + ref + 24));
    result.end = end;

    return result;
}

inline uint PietStrokeLine_flags(const device char *buf, PietStrokeLineRef ref) {
    uint flags = *(device const uint*)(buf + ref + 4);
    return flags;
}

inline uint PietStrokeLine_rgba_color(const device char *buf, PietStrokeLineRef ref) {
    uint rgba_color = *(device const uint*)(buf + ref + 8);
    return rgba_color;
}

inline float PietStrokeLine_width(const device char *buf, PietStrokeLineRef ref) {
    float width = as_type<float>(*(device const uint*)(buf + ref + 12));
    return width;
}

inline float2 PietStrokeLine_start(const device char *buf, PietStrokeLineRef ref) {
    float2 start = as_type<float2>(*(device const packed_uint2*)(buf + ref + 16));
    return start;
}

inline float2 PietStrokeLine_end(const device char *buf, PietStrokeLineRef ref) {
    float2 end = as_type<float2>(*(device const packed_uint2*)(buf + ref + 24));
    return end;
}

struct PietStrokeLine {
    uint flags;
    uint rgba_color;
    float width;
    float2 start;
    float2 end;
};

inline PietStrokeLine PietStrokeLine_unpack(PietStrokeLinePacked packed_form) {
    PietStrokeLine result;

    result.flags = packed_form.flags;
    result.rgba_color = packed_form.rgba_color;
    result.width = packed_form.width;
    result.start = packed_form.start;
    result.end = packed_form.end;

    return result;
}

struct PietFillPacked {
    uint tag;
    uint flags;
    uint rgba_color;
    uint n_points;
    uint points_ix;
};

inline PietFillPacked PietFill_read(const device char *buf, PietFillRef ref) {
    PietFillPacked result;

    uint flags = *(device const uint*)(buf + ref + 4);
    result.flags = flags;

    uint rgba_color = *(device const uint*)(buf + ref + 8);
    result.rgba_color = rgba_color;

    uint n_points = *(device const uint*)(buf + ref + 12);
    result.n_points = n_points;

    uint points_ix = *(device const uint*)(buf + ref + 16);
    result.points_ix = points_ix;

    return result;
}

inline uint PietFill_flags(const device char *buf, PietFillRef ref) {
    uint flags = *(device const uint*)(buf + ref + 4);
    return flags;
}

inline uint PietFill_rgba_color(const device char *buf, PietFillRef ref) {
    uint rgba_color = *(device const uint*)(buf + ref + 8);
    return rgba_color;
}

inline uint PietFill_n_points(const device char *buf, PietFillRef ref) {
    uint n_points = *(device const uint*)(buf + ref + 12);
    return n_points;
}

inline uint PietFill_points_ix(const device char *buf, PietFillRef ref) {
    uint points_ix = *(device const uint*)(buf + ref + 16);
    return points_ix;
}

struct PietFill {
    uint flags;
    uint rgba_color;
    uint n_points;
    uint points_ix;
};

inline PietFill PietFill_unpack(PietFillPacked packed_form) {
    PietFill result;

    result.flags = packed_form.flags;
    result.rgba_color = packed_form.rgba_color;
    result.n_points = packed_form.n_points;
    result.points_ix = packed_form.points_ix;

    return result;
}

struct PietStrokePolyLinePacked {
    uint tag;
    uint rgba_color;
    float width;
    uint n_points;
    uint points_ix;
};

inline PietStrokePolyLinePacked PietStrokePolyLine_read(const device char *buf, PietStrokePolyLineRef ref) {
    PietStrokePolyLinePacked result;

    uint rgba_color = *(device const uint*)(buf + ref + 4);
    result.rgba_color = rgba_color;

    float width = as_type<float>(*(device const uint*)(buf + ref + 8));
    result.width = width;

    uint n_points = *(device const uint*)(buf + ref + 12);
    result.n_points = n_points;

    uint points_ix = *(device const uint*)(buf + ref + 16);
    result.points_ix = points_ix;

    return result;
}

inline uint PietStrokePolyLine_rgba_color(const device char *buf, PietStrokePolyLineRef ref) {
    uint rgba_color = *(device const uint*)(buf + ref + 4);
    return rgba_color;
}

inline float PietStrokePolyLine_width(const device char *buf, PietStrokePolyLineRef ref) {
    float width = as_type<float>(*(device const uint*)(buf + ref + 8));
    return width;
}

inline uint PietStrokePolyLine_n_points(const device char *buf, PietStrokePolyLineRef ref) {
    uint n_points = *(device const uint*)(buf + ref + 12);
    return n_points;
}

inline uint PietStrokePolyLine_points_ix(const device char *buf, PietStrokePolyLineRef ref) {
    uint points_ix = *(device const uint*)(buf + ref + 16);
    return points_ix;
}

struct PietStrokePolyLine {
    uint rgba_color;
    float width;
    uint n_points;
    uint points_ix;
};

inline PietStrokePolyLine PietStrokePolyLine_unpack(PietStrokePolyLinePacked packed_form) {
    PietStrokePolyLine result;

    result.rgba_color = packed_form.rgba_color;
    result.width = packed_form.width;
    result.n_points = packed_form.n_points;
    result.points_ix = packed_form.points_ix;

    return result;
}

struct PietItem {
    uint tag;
    uint body[7];
};
inline uint PietItem_tag(const device char *buf, PietItemRef ref) {
    uint result = *(device const uint*)(buf + ref);
    return result;
}

#define SIMPLE_GROUP_SIZE 12
#define PIET_ITEM_SIZE 32
#define PietItem_Circle 0
#define PietItem_Line 1
#define PietItem_Fill 2
#define PietItem_Poly 3

// Following are older-style accessors (haven't converted ptcl yet)

typedef uint CmdCircleRef;
typedef uint CmdLineRef;
typedef uint CmdStrokeRef;
typedef uint CmdFillRef;
typedef uint CmdFillEdgeRef;
typedef uint CmdDrawFillRef;
typedef uint CmdSolidRef;
typedef uint CmdRef;
struct CmdCirclePacked {
    uint tag;
    ushort4 bbox;
};
CmdCirclePacked CmdCircle_read(const device char *buf, CmdCircleRef ref) {
    return *((const device CmdCirclePacked *)(buf + ref));
}
ushort4 CmdCircle_bbox(const device char *buf, CmdCircleRef ref) {
    return ((const device CmdCirclePacked *)(buf + ref))->bbox;
}
struct CmdLinePacked {
    uint tag;
    float2 start;
    float2 end;
};
CmdLinePacked CmdLine_read(const device char *buf, CmdLineRef ref) {
    return *((const device CmdLinePacked *)(buf + ref));
}
float2 CmdLine_start(const device char *buf, CmdLineRef ref) {
    return ((const device CmdLinePacked *)(buf + ref))->start;
}
float2 CmdLine_end(const device char *buf, CmdLineRef ref) {
    return ((const device CmdLinePacked *)(buf + ref))->end;
}
struct CmdStrokePacked {
    uint tag;
    float halfWidth;
    uint rgba_color;
};
CmdStrokePacked CmdStroke_read(const device char *buf, CmdStrokeRef ref) {
    return *((const device CmdStrokePacked *)(buf + ref));
}
float CmdStroke_halfWidth(const device char *buf, CmdStrokeRef ref) {
    return ((const device CmdStrokePacked *)(buf + ref))->halfWidth;
}
uint CmdStroke_rgba_color(const device char *buf, CmdStrokeRef ref) {
    return ((const device CmdStrokePacked *)(buf + ref))->rgba_color;
}
struct CmdFillPacked {
    uint tag;
    float2 start;
    float2 end;
};
CmdFillPacked CmdFill_read(const device char *buf, CmdFillRef ref) {
    return *((const device CmdFillPacked *)(buf + ref));
}
float2 CmdFill_start(const device char *buf, CmdFillRef ref) {
    return ((const device CmdFillPacked *)(buf + ref))->start;
}
float2 CmdFill_end(const device char *buf, CmdFillRef ref) {
    return ((const device CmdFillPacked *)(buf + ref))->end;
}
struct CmdFillEdgePacked {
    uint tag;
    int sign;
    float y;
};
CmdFillEdgePacked CmdFillEdge_read(const device char *buf, CmdFillEdgeRef ref) {
    return *((const device CmdFillEdgePacked *)(buf + ref));
}
int CmdFillEdge_sign(const device char *buf, CmdFillEdgeRef ref) {
    return ((const device CmdFillEdgePacked *)(buf + ref))->sign;
}
float CmdFillEdge_y(const device char *buf, CmdFillEdgeRef ref) {
    return ((const device CmdFillEdgePacked *)(buf + ref))->y;
}
struct CmdDrawFillPacked {
    uint tag;
    int backdrop;
    uint rgba_color;
};
CmdDrawFillPacked CmdDrawFill_read(const device char *buf, CmdDrawFillRef ref) {
    return *((const device CmdDrawFillPacked *)(buf + ref));
}
int CmdDrawFill_backdrop(const device char *buf, CmdDrawFillRef ref) {
    return ((const device CmdDrawFillPacked *)(buf + ref))->backdrop;
}
uint CmdDrawFill_rgba_color(const device char *buf, CmdDrawFillRef ref) {
    return ((const device CmdDrawFillPacked *)(buf + ref))->rgba_color;
}
struct CmdSolidPacked {
    uint tag;
    uint rgba_color;
};
CmdSolidPacked CmdSolid_read(const device char *buf, CmdSolidRef ref) {
    return *((const device CmdSolidPacked *)(buf + ref));
}
uint CmdSolid_rgba_color(const device char *buf, CmdSolidRef ref) {
    return ((const device CmdSolidPacked *)(buf + ref))->rgba_color;
}
struct Cmd {
    uint tag;
    uint body[5];
};
Cmd Cmd_read(const device char *buf, CmdRef ref) {
    return *((const device Cmd *)(buf + ref));
}
uint Cmd_tag(const device char *buf, CmdRef ref) {
    return ((const device Cmd *)(buf + ref))->tag;
}
#define Cmd_End 1
#define Cmd_Circle 2
CmdCirclePacked CmdCircle_load(const thread Cmd &s) {
    CmdCirclePacked r;
    r.tag = s.tag;
    r.bbox = *((const thread ushort4 *)((const thread char *)&s + 8));
    return r;
}
#define Cmd_Line 3
CmdLinePacked CmdLine_load(const thread Cmd &s) {
    CmdLinePacked r;
    r.tag = s.tag;
    r.start = *((const thread float2 *)((const thread char *)&s + 8));
    r.end = *((const thread float2 *)((const thread char *)&s + 16));
    return r;
}
#define Cmd_Fill 4
CmdFillPacked CmdFill_load(const thread Cmd &s) {
    CmdFillPacked r;
    r.tag = s.tag;
    r.start = *((const thread float2 *)((const thread char *)&s + 8));
    r.end = *((const thread float2 *)((const thread char *)&s + 16));
    return r;
}
#define Cmd_Stroke 5
CmdStrokePacked CmdStroke_load(const thread Cmd &s) {
    CmdStrokePacked r;
    r.tag = s.tag;
    r.halfWidth = *((const thread float *)((const thread char *)&s + 4));
    r.rgba_color = *((const thread uint *)((const thread char *)&s + 8));
    return r;
}
#define Cmd_FillEdge 6
CmdFillEdgePacked CmdFillEdge_load(const thread Cmd &s) {
    CmdFillEdgePacked r;
    r.tag = s.tag;
    r.sign = *((const thread int *)((const thread char *)&s + 4));
    r.y = *((const thread float *)((const thread char *)&s + 8));
    return r;
}
#define Cmd_DrawFill 7
CmdDrawFillPacked CmdDrawFill_load(const thread Cmd &s) {
    CmdDrawFillPacked r;
    r.tag = s.tag;
    r.backdrop = *((const thread int *)((const thread char *)&s + 4));
    r.rgba_color = *((const thread uint *)((const thread char *)&s + 8));
    return r;
}
#define Cmd_Solid 8
CmdSolidPacked CmdSolid_load(const thread Cmd &s) {
    CmdSolidPacked r;
    r.tag = s.tag;
    r.rgba_color = *((const thread uint *)((const thread char *)&s + 4));
    return r;
}
#define Cmd_Bail 9

void CmdCircle_write(device char *buf, CmdCircleRef ref, CmdCirclePacked s) {
    *((device CmdCirclePacked *)(buf + ref)) = s;
}
void CmdLine_write(device char *buf, CmdLineRef ref, CmdLinePacked s) {
    *((device CmdLinePacked *)(buf + ref)) = s;
}
void CmdStroke_write(device char *buf, CmdStrokeRef ref, CmdStrokePacked s) {
    *((device CmdStrokePacked *)(buf + ref)) = s;
}
void CmdFill_write(device char *buf, CmdFillRef ref, CmdFillPacked s) {
    *((device CmdFillPacked *)(buf + ref)) = s;
}
void CmdFillEdge_write(device char *buf, CmdFillEdgeRef ref, CmdFillEdgePacked s) {
    *((device CmdFillEdgePacked *)(buf + ref)) = s;
}
void CmdDrawFill_write(device char *buf, CmdDrawFillRef ref, CmdDrawFillPacked s) {
    *((device CmdDrawFillPacked *)(buf + ref)) = s;
}
void CmdSolid_write(device char *buf, CmdSolidRef ref, CmdSolidPacked s) {
    *((device CmdSolidPacked *)(buf + ref)) = s;
}
void Cmd_write_tag(device char *buf, CmdRef ref, uint tag) {
    ((device Cmd *)(buf + ref))->tag = tag;
}

